[
  {
    "id": 1,
    "title": "Two Sum",
    "difficulty": "Easy",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]"
      }
    ],
    "testCases": [
      {
        "input": "[2,7,11,15]\n9",
        "expectedOutput": "[0,1]"
      },
      {
        "input": "[3,2,4]\n6",
        "expectedOutput": "[1,2]"
      },
      {
        "input": "[3,3]\n6",
        "expectedOutput": "[0,1]"
      },
      {
        "input": "[1,5,8,10,13]\n18",
        "expectedOutput": "[2,3]"
      },
      {
        "input": "[-1,-2,-3,-4,-5]\n-8",
        "expectedOutput": "[2,4]"
      },
      {
        "input": "[0,4,3,0]\n0",
        "expectedOutput": "[0,3]"
      }
    ],
    "functionName": "twoSum",
    "inputs": {
      "python": {
        "nums": "List[int]",
        "target": "int"
      },
      "cpp": {
        "nums": "vector<int>&",
        "target": "int"
      },
      "java": {
        "nums": "int[]",
        "target": "int"
      },
      "javascript": {
        "nums": "number[]",
        "target": "number"
      }
    },
    "output": "List[int]"
  },
  {
    "id": 2,
    "title": "Reverse Integer",
    "difficulty": "Easy",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range, return 0.",
    "examples": [
      {
        "input": "x = 123",
        "output": "321"
      },
      {
        "input": "x = -123",
        "output": "-321"
      }
    ],
    "testCases": [
      {
        "input": "123",
        "expectedOutput": "321"
      },
      {
        "input": "-120",
        "expectedOutput": "-21"
      },
      {
        "input": "1534236469",
        "expectedOutput": "9646324351"
      },
      {
        "input": "0",
        "expectedOutput": "0"
      },
      {
        "input": "10",
        "expectedOutput": "1"
      },
      {
        "input": "-2147483648",
        "expectedOutput": "-8463847412"
      },
      {
        "input": "2147483647",
        "expectedOutput": "7463847412"
      }
    ],
    "functionName": "reverse",
    "inputs": {
      "python": {
        "x": "int"
      },
      "cpp": {
        "x": "int"
      },
      "java": {
        "x": "int"
      },
      "javascript": {
        "x": "number"
      }
    },
    "output": "int"
  },
  {
    "id": 3,
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "description": "Given a string s containing just the characters '()[]{}', determine if the input string is valid.",
    "examples": [
      {
        "input": "s = '()'",
        "output": "true"
      },
      {
        "input": "s = '(]'",
        "output": "false"
      }
    ],
    "testCases": [
      {
        "input": "([])",
        "expectedOutput": "true"
      },
      {
        "input": "([)]",
        "expectedOutput": "false"
      },
      {
        "input": "{[]}",
        "expectedOutput": "true"
      },
      {
        "input": "(){}[]",
        "expectedOutput": "true"
      },
      {
        "input": "((",
        "expectedOutput": "false"
      },
      {
        "input": "){",
        "expectedOutput": "false"
      },
      {
        "input": "",
        "expectedOutput": "true"
      },
      {
        "input": "([{}])",
        "expectedOutput": "true"
      }
    ],
    "functionName": "isValid",
    "inputs": {
      "python": {
        "s": "str"
      },
      "cpp": {
        "s": "string"
      },
      "java": {
        "s": "String"
      },
      "javascript": {
        "s": "string"
      }
    },
    "output": "bool"
  }
]