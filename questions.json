[
  {
    "id": 1,
    "title": "Reverse Integer",
    "difficulty": "Easy",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range, return 0.",
    "examples": [
      {
        "input": "x = 123",
        "output": "321"
      },
      {
        "input": "x = -123",
        "output": "-321"
      }
    ],
    "testCases": [
      {
        "input": "123",
        "expectedOutput": "321"
      },
      {
        "input": "-120",
        "expectedOutput": "-21"
      },
      {
        "input": "1534236",
        "expectedOutput": "6324351"
      },
      {
        "input": "0",
        "expectedOutput": "0"
      },
      {
        "input": "10",
        "expectedOutput": "1"
      },
      {
        "input": "-483648",
        "expectedOutput": "-846384"
      },
      {
        "input": "214748",
        "expectedOutput": "847412"
      }
    ],
    "functionName": "reverse",
    "inputs": {
      "python": {
        "x": "int"
      },
      "cpp": {
        "x": "int"
      },
      "java": {
        "x": "int"
      },
      "javascript": {
        "x": "number"
      }
    },
    "output": "int"
  },
  {
    "id": 2,
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "description": "Given a string s containing just the characters '()[]{}', determine if the input string is valid.",
    "examples": [
      {
        "input": "s = '()'",
        "output": "true"
      },
      {
        "input": "s = '(]'",
        "output": "false"
      }
    ],
    "testCases": [
      {
        "input": "([])",
        "expectedOutput": "true"
      },
      {
        "input": "([)]",
        "expectedOutput": "false"
      },
      {
        "input": "{[]}",
        "expectedOutput": "true"
      },
      {
        "input": "(){}[]",
        "expectedOutput": "true"
      },
      {
        "input": "((",
        "expectedOutput": "false"
      },
      {
        "input": "){",
        "expectedOutput": "false"
      },
      {
        "input": "",
        "expectedOutput": "true"
      },
      {
        "input": "([{}])",
        "expectedOutput": "true"
      }
    ],
    "functionName": "isValid",
    "inputs": {
      "python": {
        "s": "str"
      },
      "cpp": {
        "s": "string"
      },
      "java": {
        "s": "String"
      },
      "javascript": {
        "s": "string"
      }
    },
    "output": "bool"
  },
  {
  "id": 3,
  "title": "Palindrome Number",
  "difficulty": "Easy",
  "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
  "examples": [
    {
      "input": "x = 121",
      "output": "true"
    },
    {
      "input": "x = -121",
      "output": "false"
    },
    {
      "input": "x = 10",
      "output": "false"
    }
  ],
  "testCases": [
    {
      "input": "121",
      "expectedOutput": "true"
    },
    {
      "input": "-121",
      "expectedOutput": "false"
    },
    {
      "input": "10",
      "expectedOutput": "false"
    },
    {
      "input": "0",
      "expectedOutput": "true"
    },
    {
      "input": "12321",
      "expectedOutput": "true"
    },
    {
      "input": "1234321",
      "expectedOutput": "true"
    },
    {
      "input": "1000021",
      "expectedOutput": "false"
    }
  ],
  "functionName": "isPalindrome",
  "inputs": {
    "python": {
      "x": "int"
    },
    "cpp": {
      "x": "int"
    },
    "java": {
      "x": "int"
    },
    "javascript": {
      "x": "number"
    }
  },
  "output": "bool"
},
{
  "id": 4,
  "title": "Single Number",
  "difficulty": "Easy",
  "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.",
  "examples": [
    {
      "input": "nums = [2,2,1]",
      "output": "1"
    },
    {
      "input": "nums = [4,1,2,1,2]",
      "output": "4"
    }
  ],
  "testCases": [
    {
      "input": "[2,2,1]",
      "expectedOutput": "1"
    },
    {
      "input": "[4,1,2,1,2]",
      "expectedOutput": "4"
    },
    {
      "input": "[1]",
      "expectedOutput": "1"
    },
    {
      "input": "[0,0,7]",
      "expectedOutput": "7"
    }
  ],
  "functionName": "singleNumber",
  "inputs": {
    "python": {
      "nums": "List[int]"
    },
    "cpp": {
      "nums": "vector<int>"
    },
    "java": {
      "nums": "int[]"
    },
    "javascript": {
      "nums": "number[]"
    }
  },
  "output": "int"
},
{
    "id": 5,
  "title": "First Unique Character in a String",
  "difficulty": "Easy",
  "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.",
  "examples": [
    {
      "input": "s = 'leetcode'",
      "output": "0"
    },
    {
      "input": "s = 'loveleetcode'",
      "output": "2"
    }
  ],
  "testCases": [
    {
      "input": "'leetcode'",
      "expectedOutput": "0"
    },
    {
      "input": "'loveleetcode'",
      "expectedOutput": "2"
    },
    {
      "input": "'aabb'",
      "expectedOutput": "-1"
    },
    {
      "input": "'z'",
      "expectedOutput": "0"
    }
  ],
  "functionName": "firstUniqChar",
  "inputs": {
    "python": {
      "s": "str"
    },
    "cpp": {
      "s": "string"
    },
    "java": {
      "s": "String"
    },
    "javascript": {
      "s": "string"
    }
  },
  "output": "int"
},
{
    "id": 6,
  "title": "Maximum Subarray",
  "difficulty": "Easy",
  "description": "Given an integer array nums, find the contiguous subarray with the largest sum and return its sum.",
  "examples": [
    {
      "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
      "output": "6"
    },
    {
      "input": "nums = [1]",
      "output": "1"
    }
  ],
  "testCases": [
    {
      "input": "[-2,1,-3,4,-1,2,1,-5,4]",
      "expectedOutput": "6"
    },
    {
      "input": "[1]",
      "expectedOutput": "1"
    },
    {
      "input": "[5,4,-1,7,8]",
      "expectedOutput": "23"
    },
    {
      "input": "[-1,-2,-3,-4]",
      "expectedOutput": "-1"
    },
    {
      "input": "[1,2,3,4,5]",
      "expectedOutput": "15"
    },
    {
      "input": "[0,0,0,0]",
      "expectedOutput": "0"
    },
    {
      "input": "[8,-19,5,-4,20]",
      "expectedOutput": "21"
    }
  ],
  "functionName": "maxSubArray",
  "inputs": {
    "python": {
      "nums": "List[int]"
    },
    "cpp": {
      "nums": "vector<int>"
    },
    "java": {
      "nums": "int[]"
    },
    "javascript": {
      "nums": "number[]"
    }
  },
  "output": "int"
},
{
   "id": 7,
  "title": "Maximum Sum of Subarray of Size K",
  "difficulty": "Easy",
  "description": "Given an array of integers and a number k, find the maximum sum of a subarray of size k.",
  "examples": [
    {
      "input": "nums = [2,1,5,1,3,2], k = 3",
      "output": "9"
    },
    {
      "input": "nums = [1,1,1,1,1], k = 2",
      "output": "2"
    }
  ],
  "testCases": [
    {
      "input": "[2,1,5,1,3,2], 3",
      "expectedOutput": "9"
    },
    {
      "input": "[1,1,1,1,1], 2",
      "expectedOutput": "2"
    },
    {
      "input": "[5,2,1,3,6,1,2], 4",
      "expectedOutput": "12"
    },
    {
      "input": "[4,2,1,7,8,1,2,8,1,0], 3",
      "expectedOutput": "16"
    },
    {
      "input": "[1,2,3], 3",
      "expectedOutput": "6"
    }
  ],
  "functionName": "maxSumSubarray",
  "inputs": {
    "python": {
      "nums": "List[int]",
      "k": "int"
    },
    "cpp": {
      "nums": "vector<int>",
      "k": "int"
    },
    "java": {
      "nums": "int[]",
      "k": "int"
    },
    "javascript": {
      "nums": "number[]",
      "k": "number"
    }
  },
  "output": "int"
}
]