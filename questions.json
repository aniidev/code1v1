[
  {
    "id": 1,
    "title": "Two Sum",
    "difficulty": "Easy",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "examples": [
      {
        "input": "nums = [2,7,11,15], target = 9",
        "output": "[0,1]"
      }
    ],
    "testCases": [
      {
        "input": "[2,7,11,15]\n9",
        "expectedOutput": "[0,1]"
      },
      {
        "input": "[3,2,4]\n6",
        "expectedOutput": "[1,2]"
      }
    ],
    "functionName": "twoSum",
    "inputs": {
      "python": {
        "nums": "List[int]",
        "target": "int"
      },
      "cpp": {
        "nums": "vector<int>&",
        "target": "int"
      },
      "java": {
        "nums": "int[]",
        "target": "int"
      },
      "javascript": {
        "nums": "number[]",
        "target": "number"
      }
    },
    "output": "List[int]"
  },
  {
    "id": 2,
    "title": "Reverse Integer",
    "difficulty": "Easy",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range, return 0.",
    "examples": [
      {
        "input": "x = 123",
        "output": "321"
      },
      {
        "input": "x = -123",
        "output": "-321"
      }
    ],
    "testCases": [
      {
        "input": "123",
        "expectedOutput": "321"
      },
      {
        "input": "-120",
        "expectedOutput": "-21"
      },
      {
        "input": "1534236469",
        "expectedOutput": "0"
      }
    ],
    "functionName": "reverse",
    "inputs": {
      "python": {
        "x": "int"
      },
      "cpp": {
        "x": "int"
      },
      "java": {
        "x": "int"
      },
      "javascript": {
        "x": "number"
      }
    },
    "output": "int"
  },
  {
    "id": 3,
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "description": "Given a string s containing just the characters '()[]{}', determine if the input string is valid.",
    "examples": [
      {
        "input": "s = '()'",
        "output": "true"
      },
      {
        "input": "s = '(]'",
        "output": "false"
      }
    ],
    "testCases": [
      {
        "input": "([])",
        "expectedOutput": "true"
      },
      {
        "input": "([)]",
        "expectedOutput": "false"
      }
    ],
    "functionName": "isValid",
    "inputs": {
      "python": {
        "s": "str"
      },
      "cpp": {
        "s": "string"
      },
      "java": {
        "s": "String"
      },
      "javascript": {
        "s": "string"
      }
    },
    "output": "bool"
  },
  {
    "id": 7,
    "title": "Median of Two Sorted Arrays",
    "difficulty": "Hard",
    "description": "Given two sorted arrays nums1 and nums2, return the median of the two sorted arrays.",
    "examples": [
      {
        "input": "nums1 = [1,3], nums2 = [2]",
        "output": "2.0"
      }
    ],
    "testCases": [
      {
        "input": "[1,3]\n[2]",
        "expectedOutput": "2.0"
      },
      {
        "input": "[1,2]\n[3,4]",
        "expectedOutput": "2.5"
      }
    ],
    "functionName": "findMedianSortedArrays",
    "inputs": {
      "python": {
        "nums1": "List[int]",
        "nums2": "List[int]"
      },
      "cpp": {
        "nums1": "vector<int>&",
        "nums2": "vector<int>&"
      },
      "java": {
        "nums1": "int[]",
        "nums2": "int[]"
      },
      "javascript": {
        "nums1": "number[]",
        "nums2": "number[]"
      }
    },
    "output": "float"
  },
  {
    "id": 8,
    "title": "Longest Palindromic Substring",
    "difficulty": "Medium",
    "description": "Given a string s, return the longest palindromic substring in s.",
    "examples": [
      {
        "input": "s = 'babad'",
        "output": "'bab' or 'aba'"
      }
    ],
    "testCases": [
      {
        "input": "cbbd",
        "expectedOutput": "bb"
      }
    ],
    "functionName": "longestPalindrome",
    "inputs": {
      "python": {
        "s": "str"
      },
      "cpp": {
        "s": "string"
      },
      "java": {
        "s": "String"
      },
      "javascript": {
        "s": "string"
      }
    },
    "output": "str"
  },
  {
    "id": 9,
    "title": "Regular Expression Matching",
    "difficulty": "Hard",
    "description": "Given an input string s and a pattern p, implement regular expression matching with support for '.' and '*'.",
    "examples": [
      {
        "input": "s = 'aa', p = 'a'",
        "output": "false"
      },
      {
        "input": "s = 'aa', p = 'a*'",
        "output": "true"
      }
    ],
    "testCases": [
      {
        "input": "mississippi\nmis*is*p*.",
        "expectedOutput": "false"
      },
      {
        "input": "ab\n.*",
        "expectedOutput": "true"
      }
    ],
    "functionName": "isMatch",
    "inputs": {
      "python": {
        "s": "str",
        "p": "str"
      },
      "cpp": {
        "s": "string",
        "p": "string"
      },
      "java": {
        "s": "String",
        "p": "String"
      },
      "javascript": {
        "s": "string",
        "p": "string"
      }
    },
    "output": "bool"
  },
  {
    "id": 10,
    "title": "Word Ladder",
    "difficulty": "Hard",
    "description": "Given two words (beginWord and endWord), and a dictionary's word list, return the length of the shortest transformation sequence from beginWord to endWord.",
    "examples": [
      {
        "input": "beginWord = 'hit', endWord = 'cog', wordList = ['hot','dot','dog','lot','log','cog']",
        "output": "5"
      }
    ],
    "testCases": [
      {
        "input": "hit\ncog\n['hot','dot','dog','lot','log','cog']",
        "expectedOutput": "5"
      },
      {
        "input": "hit\ncog\n['hot','dot','dog','lot','log']",
        "expectedOutput": "0"
      }
    ],
    "functionName": "ladderLength",
    "inputs": {
      "python": {
        "beginWord": "str",
        "endWord": "str",
        "wordList": "List[str]"
      },
      "cpp": {
        "beginWord": "string",
        "endWord": "string",
        "wordList": "vector<string>&"
      },
      "java": {
        "beginWord": "String",
        "endWord": "String",
        "wordList": "List<String>"
      },
      "javascript": {
        "beginWord": "string",
        "endWord": "string",
        "wordList": "string[]"
      }
    },
    "output": "int"
  }
]
