[
  {
    "id": 1,
    "title": "Reverse Integer",
    "difficulty": "Easy",
    "description": "Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range, return 0.",
    "examples": [
      {
        "input": "x = 123",
        "output": "321"
      },
      {
        "input": "x = -123",
        "output": "-321"
      }
    ],
    "testCases": [
      {
        "input": "123",
        "expectedOutput": "321"
      },
      {
        "input": "-120",
        "expectedOutput": "-21"
      },
      {
        "input": "1534236",
        "expectedOutput": "6324351"
      },
      {
        "input": "0",
        "expectedOutput": "0"
      },
      {
        "input": "10",
        "expectedOutput": "1"
      },
      {
        "input": "-483648",
        "expectedOutput": "-846384"
      },
      {
        "input": "214748",
        "expectedOutput": "847412"
      }
    ],
    "functionName": "reverse",
    "inputs": {
      "python": {
        "x": "int"
      },
      "cpp": {
        "x": "int"
      },
      "java": {
        "x": "int"
      },
      "javascript": {
        "x": "number"
      }
    },
    "output": "int"
  },
  {
    "id": 2,
    "title": "Valid Parentheses",
    "difficulty": "Easy",
    "description": "Given a string s containing just the characters '()[]{}', determine if the input string is valid.",
    "examples": [
      {
        "input": "s = '()'",
        "output": "true"
      },
      {
        "input": "s = '(]'",
        "output": "false"
      }
    ],
    "testCases": [
      {
        "input": "([])",
        "expectedOutput": "true"
      },
      {
        "input": "([)]",
        "expectedOutput": "false"
      },
      {
        "input": "{[]}",
        "expectedOutput": "true"
      },
      {
        "input": "(){}[]",
        "expectedOutput": "true"
      },
      {
        "input": "((",
        "expectedOutput": "false"
      },
      {
        "input": "){",
        "expectedOutput": "false"
      },
      {
        "input": "",
        "expectedOutput": "true"
      },
      {
        "input": "([{}])",
        "expectedOutput": "true"
      }
    ],
    "functionName": "isValid",
    "inputs": {
      "python": {
        "s": "str"
      },
      "cpp": {
        "s": "string"
      },
      "java": {
        "s": "String"
      },
      "javascript": {
        "s": "string"
      }
    },
    "output": "bool"
  },
  {
  "id": 3,
  "title": "Palindrome Number",
  "difficulty": "Easy",
  "description": "Given an integer x, return true if x is a palindrome, and false otherwise.",
  "examples": [
    {
      "input": "x = 121",
      "output": "true"
    },
    {
      "input": "x = -121",
      "output": "false"
    },
    {
      "input": "x = 10",
      "output": "false"
    }
  ],
  "testCases": [
    {
      "input": "121",
      "expectedOutput": "true"
    },
    {
      "input": "-121",
      "expectedOutput": "false"
    },
    {
      "input": "10",
      "expectedOutput": "false"
    },
    {
      "input": "0",
      "expectedOutput": "true"
    },
    {
      "input": "12321",
      "expectedOutput": "true"
    },
    {
      "input": "1234321",
      "expectedOutput": "true"
    },
    {
      "input": "1000021",
      "expectedOutput": "false"
    }
  ],
  "functionName": "isPalindrome",
  "inputs": {
    "python": {
      "x": "int"
    },
    "cpp": {
      "x": "int"
    },
    "java": {
      "x": "int"
    },
    "javascript": {
      "x": "number"
    }
  },
  "output": "bool"
},
{
  "id": 4,
  "title": "Single Number",
  "difficulty": "Easy",
  "description": "Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.",
  "examples": [
    {
      "input": "nums = [2,2,1]",
      "output": "1"
    },
    {
      "input": "nums = [4,1,2,1,2]",
      "output": "4"
    }
  ],
  "testCases": [
    {
      "input": "[2,2,1]",
      "expectedOutput": "1"
    },
    {
      "input": "[4,1,2,1,2]",
      "expectedOutput": "4"
    },
    {
      "input": "[1]",
      "expectedOutput": "1"
    },
    {
      "input": "[0,0,7]",
      "expectedOutput": "7"
    }
  ],
  "functionName": "singleNumber",
  "inputs": {
    "python": {
      "nums": "List[int]"
    },
    "cpp": {
      "nums": "vector<int>"
    },
    "java": {
      "nums": "int[]"
    },
    "javascript": {
      "nums": "number[]"
    }
  },
  "output": "int"
},
{
    "id": 5,
  "title": "First Unique Character in a String",
  "difficulty": "Easy",
  "description": "Given a string s, find the first non-repeating character in it and return its index. If it does not exist, return -1.",
  "examples": [
    {
      "input": "s = 'leetcode'",
      "output": "0"
    },
    {
      "input": "s = 'loveleetcode'",
      "output": "2"
    }
  ],
  "testCases": [
    {
      "input": "'leetcode'",
      "expectedOutput": "0"
    },
    {
      "input": "'loveleetcode'",
      "expectedOutput": "2"
    },
    {
      "input": "'aabb'",
      "expectedOutput": "-1"
    },
    {
      "input": "'z'",
      "expectedOutput": "0"
    }
  ],
  "functionName": "firstUniqChar",
  "inputs": {
    "python": {
      "s": "str"
    },
    "cpp": {
      "s": "string"
    },
    "java": {
      "s": "String"
    },
    "javascript": {
      "s": "string"
    }
  },
  "output": "int"
},
{
    "id": 6,
  "title": "Maximum Subarray",
  "difficulty": "Easy",
  "description": "Given an integer array nums, find the contiguous subarray with the largest sum and return its sum.",
  "examples": [
    {
      "input": "nums = [-2,1,-3,4,-1,2,1,-5,4]",
      "output": "6"
    },
    {
      "input": "nums = [1]",
      "output": "1"
    }
  ],
  "testCases": [
    {
      "input": "[-2,1,-3,4,-1,2,1,-5,4]",
      "expectedOutput": "6"
    },
    {
      "input": "[1]",
      "expectedOutput": "1"
    },
    {
      "input": "[5,4,-1,7,8]",
      "expectedOutput": "23"
    },
    {
      "input": "[-1,-2,-3,-4]",
      "expectedOutput": "-1"
    },
    {
      "input": "[1,2,3,4,5]",
      "expectedOutput": "15"
    },
    {
      "input": "[0,0,0,0]",
      "expectedOutput": "0"
    },
    {
      "input": "[8,-19,5,-4,20]",
      "expectedOutput": "21"
    }
  ],
  "functionName": "maxSubArray",
  "inputs": {
    "python": {
      "nums": "List[int]"
    },
    "cpp": {
      "nums": "vector<int>"
    },
    "java": {
      "nums": "int[]"
    },
    "javascript": {
      "nums": "number[]"
    }
  },
  "output": "int"
},
{
   "id": 7,
  "title": "Maximum Sum of Subarray of Size K",
  "difficulty": "Easy",
  "description": "Given an array of integers and a number k, find the maximum sum of a subarray of size k.",
  "examples": [
    {
      "input": "nums = [2,1,5,1,3,2], k = 3",
      "output": "9"
    },
    {
      "input": "nums = [1,1,1,1,1], k = 2",
      "output": "2"
    }
  ],
  "testCases": [
    {
      "input": "[2,1,5,1,3,2], 3",
      "expectedOutput": "9"
    },
    {
      "input": "[1,1,1,1,1], 2",
      "expectedOutput": "2"
    },
    {
      "input": "[5,2,1,3,6,1,2], 4",
      "expectedOutput": "12"
    },
    {
      "input": "[4,2,1,7,8,1,2,8,1,0], 3",
      "expectedOutput": "16"
    },
    {
      "input": "[1,2,3], 3",
      "expectedOutput": "6"
    }
  ],
  "functionName": "maxSumSubarray",
  "inputs": {
    "python": {
      "nums": "List[int]",
      "k": "int"
    },
    "cpp": {
      "nums": "vector<int>",
      "k": "int"
    },
    "java": {
      "nums": "int[]",
      "k": "int"
    },
    "javascript": {
      "nums": "number[]",
      "k": "number"
    }
  },
  "output": "int"
},
  {
    "id": 8,
    "title": "Climbing Stairs",
    "difficulty": "Easy",
    "description": "You are climbing a staircase. It takes n steps to reach the top. Each time you can climb either 1 or 2 steps. In how many distinct ways can you climb to the top?",
    "examples": [
      {
        "input": "n = 2",
        "output": "2"
      },
      {
        "input": "n = 3",
        "output": "3"
      }
    ],
    "testCases": [
      {
        "input": "2",
        "expectedOutput": "2"
      },
      {
        "input": "3",
        "expectedOutput": "3"
      },
      {
        "input": "1",
        "expectedOutput": "1"
      },
      {
        "input": "5",
        "expectedOutput": "8"
      },
      {
        "input": "10",
        "expectedOutput": "89"
      }
    ],
    "functionName": "climbStairs",
    "inputs": {
      "python": {
        "n": "int"
      },
      "cpp": {
        "n": "int"
      },
      "java": {
        "n": "int"
      },
      "javascript": {
        "n": "number"
      }
    },
    "output": "int"
  },
  {
    "id": 9,
    "title": "Best Time to Buy and Sell Stock",
    "difficulty": "Easy",
    "description": "You are given an array prices where prices[i] is the price of a given stock on the i th day. You want to maximize your profit by choosing a single day to buy and a different day in the future to sell. Return the maximum profit you can achieve. If you cannot achieve any profit, return 0.",
    "examples": [
      {
        "input": "prices = [7,1,5,3,6,4]",
        "output": "5"
      },
      {
        "input": "prices = [7,6,4,3,1]",
        "output": "0"
      }
    ],
    "testCases": [
      {
        "input": "[7,1,5,3,6,4]",
        "expectedOutput": "5"
      },
      {
        "input": "[7,6,4,3,1]",
        "expectedOutput": "0"
      },
      {
        "input": "[1,2]",
        "expectedOutput": "1"
      },
      {
        "input": "[2,4,1]",
        "expectedOutput": "2"
      },
      {
        "input": "[3,3,5,0,0,3,1,4]",
        "expectedOutput": "4"
      }
    ],
    "functionName": "maxProfit",
    "inputs": {
      "python": {
        "prices": "List[int]"
      },
      "cpp": {
        "prices": "vector<int>"
      },
      "java": {
        "prices": "int[]"
      },
      "javascript": {
        "prices": "number[]"
      }
    },
    "output": "int"
  },
  {
    "id": 10,
    "title": "Missing Number",
    "difficulty": "Easy",
    "description": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
    "examples": [
      {
        "input": "nums = [3,0,1]",
        "output": "2"
      },
      {
        "input": "nums = [0,1]",
        "output": "2"
      }
    ],
    "testCases": [
      {
        "input": "[3,0,1]",
        "expectedOutput": "2"
      },
      {
        "input": "[0,1]",
        "expectedOutput": "2"
      },
      {
        "input": "[9,6,4,2,3,5,7,0,1]",
        "expectedOutput": "8"
      },
      {
        "input": "[0]",
        "expectedOutput": "1"
      }
    ],
    "functionName": "missingNumber",
    "inputs": {
      "python": {
        "nums": "List[int]"
      },
      "cpp": {
        "nums": "vector<int>"
      },
      "java": {
        "nums": "int[]"
      },
      "javascript": {
        "nums": "number[]"
      }
    },
    "output": "int"
  },
   {
    "id": 11,
    "title": "Top K Frequent Elements",
    "difficulty": "Medium",
    "description": "Given an integer array nums and an integer k, return the k most frequent elements. Sort your answer.",
    "examples": [
      {
        "input": "nums = [1,1,1,2,2,3], k = 2",
        "output": "[1,2]"
      },
      {
        "input": "nums = [1], k = 1",
        "output": "[1]"
      }
    ],
    "testCases": [
      {
        "input": "[1,1,1,2,2,3], 2",
        "expectedOutput": "[1,2]"
      },
      {
        "input": "[1], 1",
        "expectedOutput": "[1]"
      },
      {
        "input": "[4,1,-1,2,-1,2,3], 2",
        "expectedOutput": "[-1,2]"
      }
    ],
    "functionName": "topKFrequent",
    "inputs": {
      "python": { "nums": "List[int]", "k": "int" },
      "cpp": { "nums": "vector<int>", "k": "int" },
      "java": { "nums": "int[]", "k": "int" },
      "javascript": { "nums": "number[]", "k": "number" }
    },
    "output": "List[int]"
  },
  {
    "id": 12,
    "title": "Product of Array Except Self",
    "difficulty": "Medium",
    "description": "Given an array nums of n integers where n > 1, return an array answer such that answer[i] is the product of all the elements of nums except nums[i]. Solve it in O(n) time without using division.",
    "examples": [
      {
        "input": "nums = [1,2,3,4]",
        "output": "[24,12,8,6]"
      },
      {
        "input": "nums = [-1,1,0,-3,3]",
        "output": "[0,0,9,0,0]"
      }
    ],
    "testCases": [
      {
        "input": "[1,2,3,4]",
        "expectedOutput": "[24,12,8,6]"
      },
      {
        "input": "[-1,1,0,-3,3]",
        "expectedOutput": "[0,0,9,0,0]"
      },
      {
        "input": "[2,3,0,4]",
        "expectedOutput": "[0,0,24,0]"
      },
      {
        "input": "[5,6,7,8,9]",
        "expectedOutput": "[3024,2520,2160,1890,1680]"
      }
    ],
    "functionName": "productExceptSelf",
    "inputs": {
      "python": { "nums": "List[int]" },
      "cpp": { "nums": "vector<int>" },
      "java": { "nums": "int[]" },
      "javascript": { "nums": "number[]" }
    },
    "output": "List[int]"
  },
  {
  "id": 12,
  "title": "Coin Change",
  "difficulty": "Medium",
  "description": "You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money. Return the fewest number of coins needed to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.",
  "examples": [
    {
      "input": "coins = [1,2,5], amount = 11",
      "output": "3"
    },
    {
      "input": "coins = [2], amount = 3",
      "output": "-1"
    },
    {
      "input": "coins = [1], amount = 0",
      "output": "0"
    }
  ],
  "testCases": [
    {
      "input": "[1,2,5], 11",
      "expectedOutput": "3"
    },
    {
      "input": "[2], 3",
      "expectedOutput": "-1"
    },
    {
      "input": "[1], 0",
      "expectedOutput": "0"
    },
    {
      "input": "[1,3,4], 6",
      "expectedOutput": "2"
    },
    {
      "input": "[2,5,10,1], 27",
      "expectedOutput": "4"
    }
  ],
  "functionName": "coinChange",
  "inputs": {
    "python": {
      "coins": "List[int]",
      "amount": "int"
    },
    "cpp": {
      "coins": "vector<int>",
      "amount": "int"
    },
    "java": {
      "coins": "int[]",
      "amount": "int"
    },
    "javascript": {
      "coins": "number[]",
      "amount": "number"
    }
  },
  "output": "int"
},
{
  "id": 13,
  "title": "Jump Game",
  "difficulty": "Medium",
  "description": "Given an array of non-negative integers nums, where each element represents your maximum jump length at that position, determine if you can reach the last index starting from the first index. Return true if you can reach the last index, otherwise return false.",
  "examples": [
    {
      "input": "nums = [2,3,1,1,4]",
      "output": "true"
    },
    {
      "input": "nums = [3,2,1,0,4]",
      "output": "false"
    }
  ],
  "testCases": [
    {
      "input": "[2,3,1,1,4]",
      "expectedOutput": "true"
    },
    {
      "input": "[3,2,1,0,4]",
      "expectedOutput": "false"
    },
    {
      "input": "[0]",
      "expectedOutput": "true"
    },
    {
      "input": "[2,0,0]",
      "expectedOutput": "true"
    },
    {
      "input": "[1,1,0,1]",
      "expectedOutput": "false"
    }
  ],
  "functionName": "canJump",
  "inputs": {
    "python": {
      "nums": "List[int]"
    },
    "cpp": {
      "nums": "vector<int>"
    },
    "java": {
      "nums": "int[]"
    },
    "javascript": {
      "nums": "number[]"
    }
  },
  "output": "bool"
},
{
  "id": 14,
  "title": "Fibonacci Number",
  "difficulty": "Easy",
  "description": "Given an integer n, return the nth Fibonacci number. The Fibonacci sequence is defined as F(0) = 0, F(1) = 1, and F(n) = F(n-1) + F(n-2) for n > 1.",
  "examples": [
    {
      "input": "n = 2",
      "output": "1"
    },
    {
      "input": "n = 3",
      "output": "2"
    },
    {
      "input": "n = 10",
      "output": "55"
    }
  ],
  "testCases": [
    {
      "input": "0",
      "expectedOutput": "0"
    },
    {
      "input": "1",
      "expectedOutput": "1"
    },
    {
      "input": "2",
      "expectedOutput": "1"
    },
    {
      "input": "5",
      "expectedOutput": "5"
    },
    {
      "input": "10",
      "expectedOutput": "55"
    }
  ],
  "functionName": "fib",
  "inputs": {
    "python": {
      "n": "int"
    },
    "cpp": {
      "n": "int"
    },
    "java": {
      "n": "int"
    },
    "javascript": {
      "n": "number"
    }
  },
  "output": "int"
}
]